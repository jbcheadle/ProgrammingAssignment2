q()
find.pacakge("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find("devtools")
install.packages("KernSmooth")
load("KernSmooth")
load(KernSmooth)
library(KernSmooth)
add2 <- function(x,y) {
x + y
}
add2(3,6)
above <- function(x, n) {
use <- x > n
x[n]
}
x <- 1:20
x
above(x)
above(x, 3)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 3)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
na
na.rn
z <- (1, 56, 6, 6)
z <- (1, 3, 6, 6)
z< 1,5,62,5
z<-1,5,6,3
z<- c(1,56,6,3)
z
z.add(NA)
append(z,4)
z
z<-append(z,4)
z
mean(z)
z
mean(z)
z<-append(z,NA)
mean(z)
mean(z, na.rm=TRUE)
formals(mean)\
formals(mean)
formals(mean())
formals(mean)
formals(sample)
formals(sd)
f <- function(a,b) {}
print(b)
f <- function(a,b) {}
f
search()
xx <- 52
Dox <- function(x) {}
View(Dox)
Dox <- function(x) {
x + xx
}
Dox
Dox(5)
Dox <- function(x) {
xx=25
x + xx
}
Dox(5)
Dox(4)+xx
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
x
if(x>5) {x <- 0}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
directory <- "C:\Users\Cheads\R Programming Coursera\specdata"
C:\\Users\\Cheads\\R Programming Coursera\\specdata
directory <- "C:\\Users\\Cheads\\R Programming Coursera\\specdata"
testdata <- read.csv(directory + "1" + ".txt")
testdata <- read.csv(directory + "001" + ".txt")
print(directory)
print(directory + ".txt")
print(directory & ".txt")
paste(directory,"001","txt",sep="")
directory <- "C:\\Users\\Cheads\\R Programming Coursera\\specdata\\"
paste(directory,"001",".csv",sep="")
testdata <-read.csv(paste(directory,"001",".csv",sep=""))
testdata
length(353)
size(235)
formatC(1,format="d",width=3,flag="0")
getwd()
getwd()
getwd()
setwd("C:/Users/Cheads/R Programming Coursera")
getwd()
paste(getwd(),"specdata","001",".csv",sep="")
directory <- (getwd(),"/specdata","001",".csv",sep="")
directory <- (getwd(),"specdata","001",".csv",sep="")
directory <- paste(getwd(),"/specdata","001",".csv",sep="")
rm(testdata)
testdata <- read.csv(directory)
directory <- paste(getwd(),"/specdata/","001",".csv",sep="")
testdata <- read.csv(directory)
x <-1:4
for(i in x) {print formatC(i,format="d",width=3,flag="0")}
for(i in x) {formatC(i,format="d",width=3,flag="0")}
for(i in x) {print x}
for(i in x) {print(x)}
for(i in x) {print(i)}
for(i in x) {print(formatC(i,format="d",width=3,flag="0"))}
testdata[1]
testdata[,1]
testdata[,3]
testdata$sulfate
x
rm(testdata)
testdata <- read.csv(paste(getwd(),"/",directory,"/",i,".csv",sep=""))
directory <- "specdata"
testdata <- read.csv(paste(getwd(),"/",directory,"/",i,".csv",sep=""))
testdata <- read.csv(paste(getwd(),"/",directory,"/","004",".csv",sep=""))
testdata$sulfate
pollutant1 <- "sulfate"
testdata$pollutant1
testdata[[pollutant1]]
vlad <- is.na()
col <- testdata[[pollutant]]
col <- testdata[[pollutant1]]
vol
col
vlad <- is.na(col)
col[!vlad]
mean(col[!vlad])
length(x)
4/5
means <- mean(col[!vlad])
means
means/length(x)
means <- means + 3
means
pollutantmean <- function(directory, pollutant, id=1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
##'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate"
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
##Open File
for(i in id) {
#format i correctly
i <- formatC(i,format="d",width=3,flag="0")
#open file
data <- read.csv(paste(getwd(),"/",directory,"/",i,".csv",sep=""))
col <- data[[pollutant]]
#Making our logical vector
bad <- is.na()
#Add up our means
means <- (means + mean(col[!bad]))
}
#Divide by length of the vector
return (means/length(i))
}
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
length(1:10)
append(col,23)
evect <- numeric(0)
evect
evect <- c(0)
evect
evect <- c()
evect
append(evect,3,3)
evect
evect <- append(evect,3,3)
evect
append(evect, c(3,6,2,3))
append(evect, col)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","sulfate",10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",23)
good <- col[!vlad]
good
len(good)
length(good)
data <- read.csv(paste(getwd(),"/",directory,"/","001",".csv",sep=""))
vlad <- is.na(data)
good <- data[!vlad]
good
good$sulfate
good <- complete.cases(data)
good
data[good]
data
data[good,]
good <- complete.cases(data)
data[good,]
dframe<-data.frame(id=c(),nobs=c())
dframe
dframe<-data.frame(id=1,nobs=321)
dframe
dframe<-rbind(dframe,c(3,5))
dframe
data[good,]
length(data[good,][1,])
length(data[good,][,1])
source("complete.R")
complete("specdata",1)
complete("specdata",3)
dframe
dframe<-rbind(dframe,c(3,66))
dframe
source("complete.R")
complete("specdata",3)
source("complete.R")
complete("specdata",c(2,4,8,10,12))
dframe<-(id=c(),nobs=c())
dframe<-data.frame(id=c(),nobs=c())
dframe
dframe<-rbind(dframe,c(3,2))
dframe
dframe<-data.frame(id=c(),nobs=c(),row.names=c("id","nobs"))
newrow = data.frame(id=c(), nobs=c())
df <- rbind(df, newrow)
dframe
colnames(dframe) <- c("id","nobs")
dframe
source("complete.R")
complete("specdata",1)
complete("specdata",30:25)
?cor
data
good_data <- complete.cases(data)
good_data
data[good_data,]
data[good_data,][2,]
data[good_data,][,2]
sulfur <- data[good_data,][,2]
nitrate <- data[good_data,][,3]
cor(sulfur,nitrate)
cor(nitrate,sulfur)
source("corr.R")
cr <-corr("specdata",150)
cr
head(cr)
summary(cr)
warnings()
dframe
dframe[1]
dframe[2]
dframe[1,1]
dframe[1,2]
source("corr.R")
cr <-corr("specdata",150)
head(cr)
summary(cr)
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","sulfate",34)
pollutantmean("specdata","nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
install.packages("swirl")
library("swirl")
library("swirl")
.libpath()
.libPaths()
install_from_swirl("R Programming")
swirl(*)
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0, 10, 100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
set.seed("testdir")
setw("testdir")
wetwd("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3", recursive=TRUE)
)
dir.create(file.path("testdir2","testdir3"),recurisve=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq<-seq(0, 10, length=30)
my_seq <- seq(5,10,length-30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
numvect <- c(0.5,55,-10,6)
num_vect <-c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"John")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
source("cachematrix.R")
wd
getwd()
setwd("C://Users//Cheads//R Programming Coursera//ProgrammingAssignment2")
getwd()
source("cachematrix.R")
x <- 1:2
y <- 1:1
xy <- cbind(x,y)
xy
solve(xy)
makeCacheMatrix()
cacheSolve(makeCacheMatrix())
source("cachematrix.R")
makeCacheMatrix(xy)
x <- matrix()
x
x <-matrix(c(3,3),c(3,1))
x <- matrix(1,3)
x
x <- matrix(2,2)
x
?matrix
x <- matrix(1:4,2,2)
x
source("cachematrix.R")
makeCacheMatrix(x)
x$getinv
y
clear()
z <- makeCacheMatrix(x)
z
z$getinv
z$setinv()
z$setinv(x)
z$getinv
class(z)
z
cacheSolve(z)
g <- makeCacheMatrix()
cacheSolve(g)
cacheSolve(g)
g
m <- makeCacheMatrix()
m$set(matrix(2:5,2,2))
m$get()
cacheSolve(m)
cacheSolve(m)
solve(matrix(2:5,2,2))
m$get()
m$getinv()
